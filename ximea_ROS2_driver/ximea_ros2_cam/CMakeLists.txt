cmake_minimum_required(VERSION 3.5)
project(ximea_ros2_cam)

set(XIMEA_INCLUDE_PATH /usr/include)
set(XIMEA_LIBRARY m3api)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(camera_calibration_parsers REQUIRED)
find_package(camera_info_manager REQUIRED)
find_package(image_transport REQUIRED)
find_package(rosbag2_cpp REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(OpenCV REQUIRED)

add_executable(ximea_ros2_cam_node src/ximea_ros2_cam_node.cpp src/ximea_ros2_cam.cpp)
ament_target_dependencies(ximea_ros2_cam_node 
  "rclcpp"
  "image_transport"
  "sensor_msgs"
  "camera_calibration_parsers"
  "camera_info_manager"
  "rosbag2_cpp"
  "cv_bridge")

target_include_directories(ximea_ros2_cam_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
  ${XIMEA_INCLUDE_PATH}
  ${OpenCV_INCLUDE_DIRS})

target_link_libraries(ximea_ros2_cam_node
  ${XIMEA_LIBRARY}
  ${OpenCV_LIBRARIES}
)

install(TARGETS ximea_ros2_cam_node
  DESTINATION lib/${PROJECT_NAME})

install(DIRECTORY config launch 
  DESTINATION share/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
